package com.gamestore.entity;
// Generated 6 May, 2020 9:30:56 PM by Hibernate Tools 5.2.12.Final

import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Game generated by hbm2java
 */
@Entity
@Table(name = "game", catalog = "gamestoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQueries({
	@NamedQuery(name = "Game.findAll" , query="SELECT g FROM Game g"),
	@NamedQuery(name = "Game.findByTitle" , query="SELECT g FROM Game g WHERE g.title = :title"),
	@NamedQuery(name = "Game.countAll" , query="SELECT COUNT(*) FROM Game g"),
	@NamedQuery(name = "Game.countByCategory" , query="SELECT COUNT(g) FROM Game g "
			+ "WHERE g.category.categoryId = :catId"),
	@NamedQuery(name = "Game.findByCategory" , query="SELECT g FROM Game g JOIN "
		+ "Category c ON g.category.categoryId = c.categoryId AND c.categoryId = :catId"),
	@NamedQuery(name= "Game.listNew" , query="SELECT g FROM Game g ORDER BY g.published DESC"),
	@NamedQuery(name= "Game.search", query="SELECT g FROM Game g where g.title LIKE '%' || :keyword || '%'"
				+ " OR g.creator LIKE '%' || :keyword || '%'"
				+ " OR g.description LIKE '%' || :keyword || '%'")
})
public class Game implements java.io.Serializable {

	private int gameId;
	private Category category;
	private String title;
	private String creator;
	private String description;
	private String isbn;
	private byte[] image;
	private String base64Image;
	private float price;
	private Date published;
	private Date lastUpdateTime;
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public Game() {
	}

	public Game(int gameId, Category category, String title, String creator, String description, String isbn,
			byte[] image, float price, Date published, Date lastUpdateTime) {
		this.gameId = gameId;
		this.category = category;
		this.title = title;
		this.creator = creator;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.published = published;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Game(int gameId, Category category, String title, String creator, String description, String isbn,
			byte[] image, float price, Date published, Date lastUpdateTime, Set<Review> reviews,
			Set<OrderDetail> orderDetails) {
		this.gameId = gameId;
		this.category = category;
		this.title = title;
		this.creator = creator;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.published = published;
		this.lastUpdateTime = lastUpdateTime;
		this.reviews = reviews;
		this.orderDetails = orderDetails;
	}

	@Id
	@Column(name = "game_id")
	@GeneratedValue(strategy = GenerationType.IDENTITY )
	public int getGameId() {
		return this.gameId;
	}

	public void setGameId(int gameId) {
		this.gameId = gameId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "creator", nullable = false, length = 64)
	public String getCreator() {
		return this.creator;
	}

	public void setCreator(String creator) {
		this.creator = creator;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isbn", nullable = false, length = 15)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "image", nullable = false)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "published", nullable = false, length = 10)
	public Date getPublished() {
		return this.published;
	}

	public void setPublished(Date published) {
		this.published = published;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "game")
	public Set<Review> getReviews() {
		TreeSet<Review> sortedReviews=new TreeSet<>(new Comparator<Review>() {

			@Override
			public int compare(Review review1, Review review2) {
				return review2.getReviewTime().compareTo(review1.getReviewTime());
			}
			
		});
		
		sortedReviews.addAll(reviews);
		return sortedReviews;
	}

	public void setReviews(Set<Review> reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "game")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}
	
	@Transient
	public String getbase64Image() {
		this.base64Image= Base64.getEncoder().encodeToString(this.image);
		return this.base64Image;
	}
	
	@Transient
	public void setbase64Image(String base64Image) {
		this.base64Image=base64Image;
	}
	
	@Transient
	public float getAverageRating() {
		float averageRating = 0.0f;
		float sum = 0.0f;
		
		if(reviews.isEmpty()) {
			return 0.0f;
		}
		
		for(Review review : reviews) {
			sum+=review.getRating();
		}
		
		averageRating=sum/reviews.size();
		
		return averageRating;
	}
	
	@Transient
	public String getRatingString(float averageRating) {
		String result="";
		
		int numberOfStarsOn = (int) averageRating;
		
		for(int i=1;i<= numberOfStarsOn;i++) {
			result+="on,";
		}
		
		int next=numberOfStarsOn+1;
		
		if(averageRating > numberOfStarsOn) {
			result+="half,";			
			next++;
		}
		
		for(int i=next;i<=5;i++) {
			result+="off,";
		}
		
		return result.substring(0, result.length()-1);
	}

	
	@Transient
	public String getRatingStars() {
		float averageRating=getAverageRating();
		
		return getRatingString(averageRating);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + gameId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Game other = (Game) obj;
		if (gameId != other.gameId)
			return false;
		return true;
	}

	
}
